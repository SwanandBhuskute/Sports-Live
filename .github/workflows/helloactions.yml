name: Sports-Live CI/CD Pipeline

# Trigger the workflow on push or pull request events to the main branch
on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"

jobs:
  build-and-test:
    # This job runs on the latest Ubuntu runner
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # Install project dependencies
      - name: Install dependencies
        run: npm install

      # Running Jest tests
      - name: Run Jest tests
        run: npm test

      # Running Cypress tests
      - name: Run Cypress tests
        uses: cypress-io/github-action@v6
        with:
          start: npm run dev
          wait-on: 'http://localhost:5173'
          wait-on-timeout: 60
          config: video=false

  build-docker-image:
    # This job depends on the build-and-test job
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      # Checkout the repository again for the Docker build context
      - name: Checkout repository
        uses: actions/checkout@v4

      # Building the Docker image
      - name: Build the Docker image
        run: |
          echo "Building Docker image..."
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/sportslive:latest .
          echo "Docker image built successfully."

      # List Docker images to confirm the image is built
      - name: List Docker images
        run: docker images

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      # Push the Docker image to Docker Hub
      - name: Push the Docker image
        run: |
          echo "Pushing Docker image..."
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/sportslive:latest
          echo "Docker image pushed successfully."

  notify:
    # This job runs on the latest Ubuntu runner and depends on the previous jobs
    runs-on: ubuntu-latest
    needs: [build-and-test, build-docker-image]
    if: always()

    steps:
      # Notify to Discord on the result of the pipeline (success or failure)
      - name: Notify to Discord
        run: |
          build_status=${{ needs.build-and-test.result }}
          docker_status=${{ needs.build-docker-image.result }}

          # Debug statements
          echo "Build and test job status: $build_status"
          echo "Build Docker image job status: $docker_status"

          if [ "$build_status" == "success" ] && [ "$docker_status" == "success" ]; then
            status_msg="succeeded✅"
          else
            status_msg="failed❌"
          fi

          echo "Overall pipeline status: $status_msg"

          echo "Sending notification to Discord with status: $status_msg"

          # Prepare message with GitHub Actions workflow link
          message="{\"content\": \"CI/CD Pipeline $status_msg. Check the [GitHub Actions](${{ github.server_url }}/${{ github.repository }}/actions) for more details.\"}"

          # Send message to Discord webhook
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "$message" \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

          echo "Notification sent to Discord."
